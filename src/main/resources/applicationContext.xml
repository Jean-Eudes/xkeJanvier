<?xml version="1.0" encoding="UTF-8"?>
<!--
	********************************************
	Application context for the project
	********************************************	
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
            http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- DataSource -->

    <!-- JNDI DataSource for JEE environments -->
    <!--<jee:jndi-lookup id="dataSource" jndi-name="jdbc/bicDatasource"/>-->

    <jdbc:embedded-database id="dataSource" type="H2">
    </jdbc:embedded-database>

    <!-- JPA EntityManagerFactory -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
            >
        <property name="jpaVendorAdapter">
            <bean
                    class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                    p:showSql="true"/>
        </property>
        <property name="loadTimeWeaver">
            <bean
                    class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory">
        <property name="jpaDialect">
            <bean
                    class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
    </bean>


    <!-- ========================= CONFIG DEFINITIONS ========================= -->

    <!--
        Activates various annotations to be detected in bean classes: Spring's
        @Required and @Autowired, as well as JSR 250''s @PostConstruct,
        @PreDestroy and @Resource (if available) and JPA's @PersistenceContext
        and @PersistenceUnit (if available).
    -->
    <context:annotation-config/>

    <context:component-scan base-package="eu.xebia.xke2013"/>

    <!-- Exception translation bean post processor -->
    <bean
            class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>


    <!-- ================================== TRANSACTIONS DEFINITIONS ================================== -->
    <!-- For the moment JPA only support ISOLATION_DEFAULT for the transaction isolation -->

    <!-- Define pointcut for txAdvices -->
    <aop:config>
        <!-- DAO Layer -->
        <aop:advisor advice-ref="txAdviceDao"
                     pointcut="execution(* eu.xebia.xke2013.dao..*.*(..))"/>
        <!-- Service Layer -->
        <aop:advisor advice-ref="txAdviceService"
                     pointcut="execution(* eu.xebia.xke2013.services..*.*(..))"/>
    </aop:config>

    <!-- the transactional advice for DAO layer -->
    <tx:advice id="txAdviceDao" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- Read methods don't use a transaction -->
            <tx:method name="read*" propagation="SUPPORTS"
                       read-only="true"/>
            <!-- Exclude Getter/Setter -->
            <tx:method name="set*" propagation="SUPPORTS"
                       read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS"
                       read-only="true"/>
            <!-- All others methods must use a existing transaction -->
            <tx:method name="*" isolation="DEFAULT" timeout="10"
                       propagation="MANDATORY" read-only="false"
                       rollback-for="org.springframework.dao.DataAccessException"/>
        </tx:attributes>
    </tx:advice>

    <!-- the transactional advice for Service layer -->
    <tx:advice id="txAdviceService" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- Read methods don't use a transaction -->
            <tx:method name="display*" propagation="SUPPORTS"
                       read-only="true"/>
            <!-- Exclude Getter/Setter -->
            <tx:method name="set*" propagation="SUPPORTS"
                       read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS"
                       read-only="true"/>
            <!-- All others methods create a transaction -->
            <tx:method name="*" isolation="DEFAULT" timeout="10"
                       propagation="REQUIRES_NEW" read-only="false"
                       rollback-for="org.springframework.dao.DataAccessException"/>
        </tx:attributes>
    </tx:advice>

</beans>